* Assumes Docker Desktop, go, kubectl, and kind are installed

 - ref: https://docs.docker.com/language/golang/build-images/
 - create main.go and build
% go build
% go mod tidy

 - create Dockerfile and build
% docker build -t hello-app $KUBE_HOME/app

 - ref: https://kind.sigs.k8s.io/docs/user/quick-start/
 - create the cluster and load the app image into the worker
% kind create cluster --name=hello-cluster --config=$KUBE_HOME/kubernetes/kind-config.yml
% kind load docker-image hello-app --name hello-cluster --nodes hello-cluster-worker

 - create kubernetes config yml file and apply
% kubectl apply -f $KUBE_HOME/kubernetes/kube-config.yml

 - cause a log event
% curl 127.0.0.1:30950/hello OR go to http://127.0.0.1:30950/hello

 - verify the log was created in /logs
% curl 127.0.0.1:30950/logs OR go to http://127.0.0.1:30950/logs

 - restart the pod
% kubectl scale deployment hello --replicas=0
% kubectl get pods // ensure the pod is gone
% kubectl scale deployment hello --replicas=1

 - log another event
% curl 127.0.0.1:30950/hello OR go to http://127.0.0.1:30950/hello

 - verify the log has two entries
% curl 127.0.0.1:30950/logs OR go to http://127.0.0.1:30950/logs

 - clean up
% kind delete cluster --name=hello-cluster